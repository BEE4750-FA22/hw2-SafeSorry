---
title: "BEE 4750/5750 Homework 2"
author: "Sonjay Lake (svl24)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia echo: false;
using Plots
function dissolved_oxygen(x)
  ka = 0.55
  kc = 0.35
  kn=0.25
  saturated_conc = 10

  DO_inflow =7.5 *1000
  DO_stream_1 = 5 * 1000
  DO_stream_2 = 5 * 1000

  CBOD_inflow =5 *1000
  CBOD_stream1 = 50 * 1000
  CBOD_stream2 = 45 * 1000

  NBOD_inflow = 5 * 1000
  NBOD_stream1 = 35 * 1000
  NBOD_stream2 = 35 * 1000

  flow_in = 100000 
  flow_stream1 = 10000
  flow_stream2 = 15000

  velocity = 6000
  
  alpha1 = exp((-ka*x)/velocity)
  alpha2 = (kc/(ka-kc))*(exp((-kc*x)/velocity)-exp((-ka*x)/velocity))
  alpha3 = (kn/(ka-kn))*(exp((-kn*x/velocity))-exp((-ka*x)/velocity))

  #x=0 defines the position at waste stream 1 inlet

  if x <= 15
    #only input from stream 1
    DO_val = ((DO_inflow * flow_in) + (DO_stream_1 * flow_stream1)) / (flow_stream1 + flow_in)
    final_cbod = (CBOD_inflow * flow_in) + (CBOD_stream1 * flow_stream1)
    final_nbod = (NBOD_inflow * flow_in) + (NBOD_stream1 * flow_stream1)

    #7.5 = intiial BOD concentration at river inlet
    
  elseif x >15
    DO_val = ((DO_inflow * flow_in) + (DO_stream_1 * flow_stream1)) + (DO_stream_2 * flow_stream2)/ (flow_stream2 + flow_stream1 + flow_in)
    final_cbod = (CBOD_inflow * flow_in) + (CBOD_stream1 * flow_stream1) + (CBOD_stream2 * flow_stream2)
    final_nbod = (NBOD_inflow * flow_in) + (NBOD_stream1 * flow_stream1) + (NBOD_stream2 * flow_stream2)

  end 

return saturated_conc*(1-alpha1) + DO_val*(alpha1) - final_cbod*(alpha2) - final_nbod*(alpha3)
#Should the initial DO from the stream be the same at x=0 (stream 1 mixes) If not how to calculate?

#
end 
f = dissolved_oxygen

plot(f,1,50)

```
## Problem 1.2

## Problem 1.3

## Problem 1.4

## Problem 1.5

## Problem 1.6

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8

```

# References
```julia
include("compile_report.jl")
compile_report("solution-template.jmd", "html")
```